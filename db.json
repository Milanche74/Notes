{
  "libraries": [
    {
      "name": "+",
      "documentation": "",
      "description": "",
      "installation": "",
      "installSnippet": "",
      "implementation": "",
      "implementationSnippet": "",
      "additional": "",
      "id": 1
    },
    {
      "name": "Webpack",
      "documentation": "https://webpack.js.org/concepts/",
      "description": "JS Module Bundler work please<br>",
      "installation": "Install webpack using npm. Webpack-cli and webpack-dev-server are required for using webpack as a dev server",
      "installSnippet": "npm i webpack webpack-cli webpack-dev-server",
      "implementation": "Configure webpack in webpack.config.json",
      "implementationSnippet": "const path = require('path');   \nconst HtmlWebpackPlugin = require('html-webpack-plugin');   \n       \nmodule.exports = {   \n      mode: 'development',   \n      entry: './src/index.js',   \n      output: {   \n        path: path.resolve(__dirname, './dist'),   \n        filename: 'main.bundle.js',   \n      },   \n      target: 'web',   \n      devtool: 'inline-source-map',   \n      devServer: {   \n        static: './dist',   \n        open: true,   \n        hot: false,   \n        liveReload: true,   \n      },   \n      module: {   \n        rules: [   \n          {   \n            test: /\\.js$/,   \n            exclude: /node_modules/,   \n            use: {   \n              loader: 'babel-loader',   \n              options: {   \n                presets: ['@babel/preset-env'],   \n              },   \n            },   \n          },   \n        ],   \n      },   \n      plugins: [   \n        new HtmlWebpackPlugin({   \n          template: './src/index.html',   \n          filename: 'index.html',   \n        }),   \n      ],   \n    };",
      "additional": "- HTMLWepbackPlugin creates HTML file in /dist folder. It is possible to pass in a custom template.",
      "id": 2
    },
    {
      "name": "Git",
      "documentation": "https://git-scm.com/book/en/v2",
      "description": "Version management tool",
      "installation": "Linux installation",
      "installSnippet": " sudo apt install git-all",
      "implementation": "CLI commands for setting up local and remote repository",
      "implementationSnippet": "git init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -m master main\ngit remote add origin https://github.com/Milanche74/Notes.git\ngit push -u origin main",
      "additional": "",
      "id": 3
    },
    {
      "name": "Lit",
      "documentation": "https://lit.dev/docs/",
      "description": "Library that covers usage of web components",
      "installation": "npm Install",
      "installSnippet": "npm i lit",
      "implementation": "Import lit to JS file, declare a class and set it up with properties, styles and render method<br>",
      "implementationSnippet": "import {LitElement, html} from 'lit';\n\nclass ToDoList extends LitElement {\n  static properties = {\n    listItems: {},\n  };\n\n  constructor() {\n    super();\n    this.listItems = [\n      {text: 'Start Lit tutorial', completed: true},\n      {text: 'Make to-do list', completed: false},\n    ];\n  }\n\n  render() {\n    return html`\n      <h2>To Do</h2>\n      <ul>\n         <!-- TODO: Render list items. -->\n      </ul>\n      <input id=\"newitem\" aria-label=\"New item\">\n      <button @click=${this.addToDo}>Add</button>\n    `;\n  }\n\n  // TODO: Add click handler.\n  addToDo() {}\n}\ncustomElements.define('todo-list', ToDoList);\n",
      "additional": "Events must have a callback (e)",
      "id": 4
    }
  ]
}